[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "rusticai-python-framework"
description = "Monorepo for Rustic AI Python Packages"
authors = ["Dragonscale Industries Inc. <dev@dragonscale.ai>"]
readme = "README.md"
homepage = "https://www.rustic.ai/"
repository = "https://github.com/rustic-ai/rustic-ai"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.13,<3.14"
rusticai-core = { path = "./core", develop = true }
rusticai-redis = { path = "./redis", develop = true }
rusticai-ray = { path = "./ray", develop = true }
rusticai-api = { path = "./api", develop = true }
rusticai-litellm = { path = "./litellm", develop = true }
rusticai-chroma = { path = "./chroma", develop = true }
rusticai-marvin = { path = "./marvin", develop = true }
rusticai-serpapi = { path = "./serpapi", develop = true }
rusticai-playwright = { path = "./playwright", develop = true }
torch = [ # Adding torch dependency explicitly to avoid issues on macOS
    { version = "^2.9.0", source = "pypi", platform = "darwin" },
    { version = "^2.9.0", source = "pytorch-cpu", platform = "linux" },
]
rusticai-huggingface = { path = "./huggingface", develop = true }
rusticai-langchain = { path = "./langchain", develop = true }
rusticai-showcase = { path = "./showcase", develop = true }
# Optional dependencies for additional functionality during runtime
gcsfs = { version = "^2024.12.0", optional = true }
rusticai-vertexai = { path = "./vertexai", develop = true }
rusticai-llm-agent = { path = "./llm-agent", develop = true }
rusticai-lancedb = {path = "./lancedb", develop = true}

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
black = { version = "^24.2.0", extras = ["jupyter"] }
flake8 = "^7.1.2"
tox = "^4.24.1"
isort = "^6.0.0"
mypy = "^1.15.0"
coverage = "^7.6.12"
cookiecutter = "^2.6.0"
tomlkit = "^0.13.2"
# redis dev dependencies
fakeredis = "^2.27.0"
# api-server dev dependencies
pytest-asyncio = "^0.25.3"
httpx = "^0.28.1"
flaky = "^3.8.1"
rusticai-testing = { path = "./testing", develop = true }


[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.14"
mdx-truly-sane-lists = "^1.3"
mkdocstrings = "^0.30.0"
mkdocstrings-python = "^1.18.2"
pydoc-markdown = "^4.8.2"

[tool.poetry.extras]
google-cloud = ["gcsfs"]

[tool.black]
line-length = 120
target-version = ['py313']
include = '(\\.pyi?$|.*/src/|.*/tests/|it/)'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  |__pycache__
  | resources/*
)/
'''

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
check_untyped_defs = true
plugins = "pydantic.mypy"
explicit_package_bases = true
exclude = [
    "^\\.venv/",
    "^\\dist/",
    "^\\.tox/",
    "^cache/",
    "cookiecutter-rustic/",
    "out/",
    "conftest.py",
]

[tool.isort]
profile = "black"
force_sort_within_sections = true # For the sorting order issues
lines_between_sections = 1 # For the newline issue
known_third_party = [
    "pydantic",
    "fastapi",
    "starlette",
    "uvicorn",
    "ray",
    "dotenv",
    "openai",
    "litellm",
    "pytest",
    "ray",
    "playwright",
    "redis",
    "serpapi",
    "marvin",
    "vertexai",
]
known_first_party = ["rustic_ai"]
known_local_folder = ["core", "rustic_ai.testing"]


[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
norecursedirs = ["cookiecutter-rustic"]

[[tool.poetry.source]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"
